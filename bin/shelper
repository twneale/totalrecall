#!/usr/bin/python3
import os
import click
import elasticsearch


@click.command()
@click.argument('cmd', default=None)
@click.option('--relevance', '-r', is_flag=True, help='Order by relevance instead of timestamp')
def main(cmd, relevance):
    es = elasticsearch.Elasticsearch(port=9201)
    query = {'query': {'match_all': {}}}
    query = {
        "query": {
            "bool": {
            "should": [],
            "must": [],
            }
        }
    }
    query['query']['bool']['must'].append({'match': {'return_code': 0}})

    predicates = dict(PWD='must')
    for key, val in os.environ.items():
        if key.startswith('___PREEXEC_'): continue
        pred = predicates.get(key, 'should')
        query['query']['bool'][pred].append({'match': {'env.' + key: val}})

    if not relevance:
        query['sort'] = {"start_timestamp": {"order": "desc"},
                         "_score": {"order": "desc"}}
    if cmd is not None:
        query['query']['bool']['must'].append({'match': {'command': cmd}})

    import pprint
    pprint.pprint(query)
    results = es.search(index='totalrecall', body=query)
    #import pdb; pdb.set_trace()

    dedupe = set()
    print('{0:<12} {1}'.format('Score', 'Command'))
    print('{0:<12} {1}'.format('==========', '=' * 30))
    for i, result in enumerate(results['hits']['hits']):
        cmd = result['_source']['command']
        if cmd not in dedupe:
            print('{_score:<12} {_source[command]:>8}'.format(**result))
        dedupe.add(cmd)
    #import pdb; pdb.set_trace()


if __name__ == "__main__":
    main()
