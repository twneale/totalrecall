#!/bin/bash

# Manual test scenarios for validating Total Recall behavior
# These tests require human verification and real-world usage patterns

echo "üß™ Total Recall Manual Test Scenarios"
echo "====================================="
echo ""
echo "These tests help verify the system works correctly in real usage."
echo "Follow the instructions and verify the expected outcomes."
echo ""

# Test Scenario 1: Basic Command Capture
echo "üìã Test 1: Basic Command Capture"
echo "--------------------------------"
echo "1. Source the preexec script:"
echo "   source scripts/preexec.sh"
echo ""
echo "2. Set some test environment variables:"
echo "   export NODE_ENV=development"
echo "   export API_KEY=secret123"
echo "   export DATABASE_URL=postgres://user:pass@localhost:5432/db"
echo ""
echo "3. Run some commands:"
echo "   ls -la"
echo "   cd /tmp"
echo "   pwd"
echo "   echo 'hello world'"
echo ""
echo "4. Check Elasticsearch for the commands:"
echo "   curl 'http://localhost:9200/totalrecall*/_search?pretty' | head -50"
echo ""
echo "Expected: You should see your commands with:"
echo "- NODE_ENV=development (plaintext)"
echo "- API_KEY=h8_xxxxxxxx (hashed)"
echo "- DATABASE_URL=h8_xxxxxxxx (hashed due to 'password' in URL)"
echo "- Correct PWD for each command (race condition test)"
echo ""
read -p "Press Enter to continue to next test..."
echo ""

# Test Scenario 2: Environment Context Changes  
echo "üìã Test 2: Environment Context Changes"
echo "--------------------------------------"
echo "1. Change environment context:"
echo "   export NODE_ENV=production"
echo "   export AWS_PROFILE=prod-account"
echo ""
echo "2. Run commands in this new context:"
echo "   git status"
echo "   npm run build"
echo "   kubectl get pods"
echo ""
echo "3. Change context again:"
echo "   export NODE_ENV=staging"
echo "   export AWS_PROFILE=staging-account"
echo ""
echo "4. Run more commands:"
echo "   docker ps"
echo "   terraform plan"
echo ""
echo "5. Query Elasticsearch for environment-specific commands:"
echo "   curl -X POST 'http://localhost:9200/totalrecall*/_search' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{\"query\":{\"term\":{\"env.NODE_ENV.keyword\":\"production\"}}}'"
echo ""
echo "Expected: Commands should be properly grouped by environment context."
echo ""
read -p "Press Enter to continue to next test..."
echo ""

# Test Scenario 3: Race Condition Verification
echo "üìã Test 3: Race Condition Verification" 
echo "---------------------------------------"
echo "1. Note your current directory:"
echo "   pwd"
echo ""
echo "2. Run a command that changes directory:"
echo "   cd /usr/local && ls"
echo ""
echo "3. Run another directory-changing command:"
echo "   cd /var/log && tail -1 system.log 2>/dev/null || tail -1 syslog 2>/dev/null || echo 'no log found'"
echo ""
echo "4. Check the PWD recorded for each command:"
echo "   curl -X POST 'http://localhost:9200/totalrecall*/_search?pretty' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{\"query\":{\"match\":{\"command\":\"cd /usr/local\"}},\"_source\":[\"command\",\"pwd\"],\"size\":1}'"
echo ""
echo "Expected: The PWD should show the directory BEFORE the cd command,"
echo "not after (proving the race condition is fixed)."
echo ""
read -p "Press Enter to continue to next test..."
echo ""

# Test Scenario 4: Configuration Changes
echo "üìã Test 4: Configuration Changes"
echo "--------------------------------"
echo "1. View current configuration:"
echo "   ./scripts/setup-env-config.sh show"
echo ""
echo "2. Add a new environment variable to allowlist:"
echo "   ./scripts/setup-env-config.sh edit"
echo "   # Add 'CUSTOM_VAR' to allowlist.exact array"
echo ""
echo "3. Set the new variable and test:"
echo "   export CUSTOM_VAR=test_value"
echo "   echo 'testing custom var'"
echo ""
echo "4. Check if the new variable is captured:"
echo "   curl -X POST 'http://localhost:9200/totalrecall*/_search' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{\"query\":{\"exists\":{\"field\":\"env.CUSTOM_VAR\"}},\"size\":1}'"
echo ""
echo "Expected: CUSTOM_VAR should appear in the captured environment."
echo ""
read -p "Press Enter to continue to next test..."
echo ""

# Test Scenario 5: Sensitive Data Protection
echo "üìã Test 5: Sensitive Data Protection"
echo "------------------------------------"
echo "1. Set various sensitive variables:"
echo "   export SECRET_TOKEN=very-secret-value"
echo "   export API_PASSWORD=super-secret-password"
echo "   export OAUTH_CLIENT_SECRET=oauth-secret"
echo "   export SAFE_VAR=not-sensitive"
echo ""
echo "2. Run a test command:"
echo "   echo 'testing sensitive var protection'"
echo ""
echo "3. Check how variables are stored:"
echo "   curl -X POST 'http://localhost:9200/totalrecall*/_search?pretty' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{\"query\":{\"match\":{\"command\":\"testing sensitive var\"}},\"_source\":[\"env\"],\"size\":1}'"
echo ""
echo "Expected:"
echo "- SECRET_TOKEN=h8_xxxxxxxx (hashed due to 'secret')"
echo "- API_PASSWORD=h8_xxxxxxxx (hashed due to 'password')"  
echo "- OAUTH_CLIENT_SECRET=h8_xxxxxxxx (hashed due to 'secret')"
echo "- SAFE_VAR=not-sensitive (plaintext, if in allowlist)"
echo ""
read -p "Press Enter to continue to next test..."
echo ""

# Test Scenario 6: Kibana Visualization
echo "üìã Test 6: Kibana Visualization"
echo "-------------------------------"
echo "1. Open Kibana in your browser:"
echo "   http://localhost:8443"
echo ""
echo "2. Navigate to Discover and select 'totalrecall*' index pattern"
echo ""
echo "3. Try these searches:"
echo "   - return_code:NOT 0 (failed commands)"
echo "   - env.NODE_ENV.keyword:production (production commands)"
echo "   - command:git* (all git commands)"
echo "   - pwd.keyword:\"/your/project/path\" (commands in specific directory)"
echo ""
echo "4. Create a visualization:"
echo "   - Go to Visualize"
echo "   - Create a pie chart of commands by return_code"
echo "   - Create a timeline of command frequency"
echo ""
echo "Expected: You should see your command history with proper filtering and visualization."
echo ""
read -p "Press Enter to continue to next test..."
echo ""

# Test Scenario 7: Error Handling
echo "üìã Test 7: Error Handling"
echo "-------------------------"
echo "1. Test with Elasticsearch down:"
echo "   docker-compose stop elasticsearch"
echo "   echo 'testing offline mode'"
echo "   # Should not cause shell to hang or error"
echo ""
echo "2. Restart Elasticsearch:"
echo "   docker-compose start elasticsearch"
echo "   sleep 10"
echo "   echo 'testing online again'"
echo ""
echo "3. Test with invalid config:"
echo "   echo 'invalid json' > /tmp/bad-config.json"
echo "   ./bin/preexec-hook -test -env-config=/tmp/bad-config.json"
echo "   # Should show graceful error handling"
echo ""
echo "Expected: Graceful degradation when services are unavailable."
echo ""
read -p "Press Enter to continue to next test..."
echo ""

# Test Scenario 8: Performance Testing
echo "üìã Test 8: Performance Testing"
echo "------------------------------"
echo "1. Run many commands quickly:"
echo "   for i in {1..20}; do echo \"Performance test \$i\"; done"
echo ""
echo "2. Test with large environment:"
echo "   for i in {1..100}; do export \"PERF_VAR_\$i\"=\"value\$i\"; done"
echo "   echo 'large environment test'"
echo ""
echo "3. Time the hook execution:"
echo "   time ./bin/preexec-hook \\"
echo "     -command=\$(echo -n 'performance test' | base64) \\"
echo "     -pwd=\$(pwd) \\"
echo "     -env=\$(env | base64 -w 0) \\"
echo "     -return-code=0 \\"
echo "     -start-timestamp=\$(date --iso-8601=seconds) \\"
echo "     -end-timestamp=\$(date --iso-8601=seconds) \\"
echo "     -host=127.0.0.1 \\"
echo "     -port=5170 \\"
echo "     -timeout=5s \\"
echo "     -env-config=\$HOME/.totalrecall/env-config.json"
echo ""
echo "Expected: Hook should complete in under 100ms to avoid shell lag."
echo ""
read -p "Press Enter to finish manual testing..."
echo ""

echo "‚úÖ Manual testing scenarios complete!"
echo ""
echo "üîç Additional verification steps:"
echo "1. Check Elasticsearch indices: curl 'http://localhost:9200/_cat/indices/totalrecall*'"
echo "2. Monitor logs: docker-compose logs -f fluent-bit"
echo "3. Check template: curl 'http://localhost:9200/_index_template/totalrecall'"
echo "4. Verify drift monitoring: ./scripts/drift-monitor.sh"
echo ""
echo "üéØ Key things to verify:"
echo "- No shell performance degradation"
echo "- Accurate PWD capture (race condition fixed)"
echo "- Proper environment variable filtering"
echo "- Sensitive data is hashed, not stored in plaintext"
echo "- Commands appear in Elasticsearch within seconds"
echo "- Kibana searches work as expected"
echo ""
